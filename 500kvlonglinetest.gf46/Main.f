!=======================================================================
! Generated by  : PSCAD v4.6.2.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    3PHVSRC       ! 3-Phase Source model

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1, IT_2, IT_3, IT_4, IT_5, BRK1
      INTEGER  BRK2, BRK3, BRK4, BRK5, BRK6
      INTEGER  brk_1c, brk1mc, brk1oc, brk_1b
      INTEGER  brk1mb, brk1ob, brk_1a, brk1ma
      INTEGER  brk1oa, BRKA, IT_6, BRKA6, BRKB
      INTEGER  BRKC, BRKB6, BRKC6, IT_7, IT_8
      INTEGER  IT_9, IT_10, IT_11, IT_12, IT_13
      INTEGER  IT_14, meaTrip(3), IT_15, IT_16
      INTEGER  IT_17, IT_18, brk1nc, brk1nb
      INTEGER  brk1na
      REAL     Im_1(3), I2(3), RT_1, meaPort2(3)
      REAL     meaPort1(9), Vn_1(3), RT_2
      REAL     In_1(3), In_zero, RT_3, RT_4, RT_5
      REAL     RT_6, RT_7, RT_8, RT_9, RT_10
      REAL     RT_11, RT_12, Vn_zero, Vn_2(3)
      REAL     Vm_1(3), Im_2(3), Vm_2(3), I1(3)
      REAL     V1(3), V2(3), In_2(3)

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(4), IBRCH(4), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 45
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 62
      IPGB      = NPGB
      NPGB      = NPGB + 18
      INODE     = NNODE + 2
      NNODE     = NNODE + 80
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 15
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 4

      DO IT_0 = 1,4
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 96

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 75

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 6

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 12
!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      IT_1     = STOI(ISTOI + 1)
      IT_2     = STOI(ISTOI + 2)
      IT_3     = STOI(ISTOI + 3)
      IT_4     = STOI(ISTOI + 4)
      IT_5     = STOI(ISTOI + 5)
      BRK1     = STOI(ISTOI + 6)
      BRK2     = STOI(ISTOI + 7)
      BRK3     = STOI(ISTOI + 8)
      BRK4     = STOI(ISTOI + 9)
      BRK5     = STOI(ISTOI + 10)
      BRK6     = STOI(ISTOI + 11)
      brk_1c   = STOI(ISTOI + 12)
      brk1mc   = STOI(ISTOI + 13)
      brk1oc   = STOI(ISTOI + 14)
      brk_1b   = STOI(ISTOI + 15)
      brk1mb   = STOI(ISTOI + 16)
      brk1ob   = STOI(ISTOI + 17)
      brk_1a   = STOI(ISTOI + 18)
      brk1ma   = STOI(ISTOI + 19)
      brk1oa   = STOI(ISTOI + 20)
      BRKA     = STOI(ISTOI + 21)
      IT_6     = STOI(ISTOI + 22)
      BRKA6    = STOI(ISTOI + 23)
      BRKB     = STOI(ISTOI + 24)
      BRKC     = STOI(ISTOI + 25)
      BRKB6    = STOI(ISTOI + 26)
      BRKC6    = STOI(ISTOI + 27)
      IT_7     = STOI(ISTOI + 28)
      IT_8     = STOI(ISTOI + 29)
      IT_9     = STOI(ISTOI + 30)
      IT_10    = STOI(ISTOI + 31)
      IT_11    = STOI(ISTOI + 32)
      IT_12    = STOI(ISTOI + 33)
      IT_13    = STOI(ISTOI + 34)
      IT_14    = STOI(ISTOI + 35)
      RT_1     = STOF(ISTOF + 7)
      IT_15    = STOI(ISTOI + 39)
      IT_16    = STOI(ISTOI + 40)
      RT_2     = STOF(ISTOF + 23)
      In_zero  = STOF(ISTOF + 27)
      RT_3     = STOF(ISTOF + 28)
      RT_4     = STOF(ISTOF + 29)
      RT_5     = STOF(ISTOF + 30)
      RT_6     = STOF(ISTOF + 31)
      RT_7     = STOF(ISTOF + 32)
      RT_8     = STOF(ISTOF + 33)
      RT_9     = STOF(ISTOF + 34)
      RT_10    = STOF(ISTOF + 35)
      RT_11    = STOF(ISTOF + 36)
      RT_12    = STOF(ISTOF + 37)
      Vn_zero  = STOF(ISTOF + 38)
      IT_17    = STOI(ISTOI + 41)
      IT_18    = STOI(ISTOI + 42)
      brk1nc   = STOI(ISTOI + 43)
      brk1nb   = STOI(ISTOI + 44)
      brk1na   = STOI(ISTOI + 45)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Im_1(IT_0) = STOF(ISTOF + 0 + IT_0)
         I2(IT_0) = STOF(ISTOF + 3 + IT_0)
         meaTrip(IT_0) = STOI(ISTOI + 35 + IT_0)
         meaPort2(IT_0) = STOF(ISTOF + 7 + IT_0)
         Vn_1(IT_0) = STOF(ISTOF + 19 + IT_0)
         In_1(IT_0) = STOF(ISTOF + 23 + IT_0)
         Vn_2(IT_0) = STOF(ISTOF + 38 + IT_0)
         Vm_1(IT_0) = STOF(ISTOF + 41 + IT_0)
         Im_2(IT_0) = STOF(ISTOF + 44 + IT_0)
         Vm_2(IT_0) = STOF(ISTOF + 47 + IT_0)
         I1(IT_0) = STOF(ISTOF + 50 + IT_0)
         V1(IT_0) = STOF(ISTOF + 53 + IT_0)
         V2(IT_0) = STOF(ISTOF + 56 + IT_0)
         In_2(IT_0) = STOF(ISTOF + 59 + IT_0)
      END DO

! Array (1:9) quantities...
      DO IT_0 = 1,9
         meaPort1(IT_0) = STOF(ISTOF + 10 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_12 = 0
      IF ( TIME .GE. 10.0 ) IT_12 = 1
      IF ( TIME .GE. (10.0+1.0) ) IT_12 = 0

! 20:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_11 = 0
      IF ( TIME .GE. 10.1 ) IT_11 = 1
      IF ( TIME .GE. (10.1+1.0) ) IT_11 = 0

! 30:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(4), (IBRCH(4)+1), (IBRCH(4)+2), (IBRCH(4)+3),&
     & (IBRCH(4)+4), (IBRCH(4)+5), (IBRCH(4)+6),0,IT_11,1,0.001)
      LVD1_1 = (OPENBR( (IBRCH(4)+1),SS(4)).AND.OPENBR( (IBRCH(4)+2),SS(&
     &4)).AND.OPENBR( (IBRCH(4)+3),SS(4)).AND.OPENBR( (IBRCH(4)+4),SS(4)&
     &).AND.OPENBR( (IBRCH(4)+5),SS(4)).AND.OPENBR( (IBRCH(4)+6),SS(4)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,361686356,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 40:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(4), (IBRCH(4)+7), (IBRCH(4)+8), (IBRCH(4)+9),&
     & (IBRCH(4)+10), (IBRCH(4)+11), (IBRCH(4)+12),0,IT_12,2,0.001)
      LVD1_1 = (OPENBR( (IBRCH(4)+7),SS(4)).AND.OPENBR( (IBRCH(4)+8),SS(&
     &4)).AND.OPENBR( (IBRCH(4)+9),SS(4)).AND.OPENBR( (IBRCH(4)+10),SS(4&
     &)).AND.OPENBR( (IBRCH(4)+11),SS(4)).AND.OPENBR( (IBRCH(4)+12),SS(4&
     &)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,1828474838,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 50:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_9 = 0
      IF ( TIME .GE. 10.1 ) IT_9 = 1
      IF ( TIME .GE. (10.1+1.0) ) IT_9 = 0

! 60:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_10 = 0
      IF ( TIME .GE. 10.01 ) IT_10 = 1
      IF ( TIME .GE. (10.01+1.0) ) IT_10 = 0

! 70:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(1), (IBRCH(1)+91), (IBRCH(1)+92), (IBRCH(1)+9&
     &3), (IBRCH(1)+94), (IBRCH(1)+95), (IBRCH(1)+96),0,IT_10,2,0.01)
      LVD1_1 = (OPENBR( (IBRCH(1)+91),SS(1)).AND.OPENBR( (IBRCH(1)+92),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+93),SS(1)).AND.OPENBR( (IBRCH(1)+94),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+95),SS(1)).AND.OPENBR( (IBRCH(1)+96),S&
     &S(1)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,834473187,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 80:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_13 = 0
      IF ( TIME .GE. 10.6 ) IT_13 = 1
      IF ( TIME .GE. (10.6+10.0) ) IT_13 = 0

! 90:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(1), (IBRCH(1)+85), (IBRCH(1)+86), (IBRCH(1)+8&
     &7), (IBRCH(1)+88), (IBRCH(1)+89), (IBRCH(1)+90),0,IT_9,1,0.0)
      LVD1_1 = (OPENBR( (IBRCH(1)+85),SS(1)).AND.OPENBR( (IBRCH(1)+86),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+87),SS(1)).AND.OPENBR( (IBRCH(1)+88),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+89),SS(1)).AND.OPENBR( (IBRCH(1)+90),S&
     &S(1)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,129414717,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 100:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_14 = 0
      IF ( TIME .GE. 10.2 ) IT_14 = 1
      IF ( TIME .GE. (10.2+2.0) ) IT_14 = 0

! 110:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(2), (IBRCH(2)+67), (IBRCH(2)+68), (IBRCH(2)+6&
     &9), (IBRCH(2)+70), (IBRCH(2)+71), (IBRCH(2)+72),0,IT_14,5,0.001)
      LVD1_1 = (OPENBR( (IBRCH(2)+67),SS(2)).AND.OPENBR( (IBRCH(2)+68),S&
     &S(2)).AND.OPENBR( (IBRCH(2)+69),SS(2)).AND.OPENBR( (IBRCH(2)+70),S&
     &S(2)).AND.OPENBR( (IBRCH(2)+71),SS(2)).AND.OPENBR( (IBRCH(2)+72),S&
     &S(2)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,2030799393,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 120:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(2), (IBRCH(2)+61), (IBRCH(2)+62), (IBRCH(2)+6&
     &3), (IBRCH(2)+64), (IBRCH(2)+65), (IBRCH(2)+66),0,IT_13,2,0.001)
      LVD1_1 = (OPENBR( (IBRCH(2)+61),SS(2)).AND.OPENBR( (IBRCH(2)+62),S&
     &S(2)).AND.OPENBR( (IBRCH(2)+63),SS(2)).AND.OPENBR( (IBRCH(2)+64),S&
     &S(2)).AND.OPENBR( (IBRCH(2)+65),SS(2)).AND.OPENBR( (IBRCH(2)+66),S&
     &S(2)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,1558930832,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 190:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_5 = 0
      IF ( TIME .GE. 10.0 ) IT_5 = 1
      IF ( TIME .GE. (10.0+1.0) ) IT_5 = 0

! 200:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_4 = 0
      IF ( TIME .GE. 20.0 ) IT_4 = 1
      IF ( TIME .GE. (20.0+0.05) ) IT_4 = 0

! 210:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_3 = 0
      IF ( TIME .GE. 20.0 ) IT_3 = 1
      IF ( TIME .GE. (20.0+0.05) ) IT_3 = 0

! 220:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_2 = 0
      IF ( TIME .GE. 21.0 ) IT_2 = 1
      IF ( TIME .GE. (21.0+1.0) ) IT_2 = 0

! 230:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_1 = 0
      IF ( TIME .GE. 10.0 ) IT_1 = 1
      IF ( TIME .GE. (10.0+2.5) ) IT_1 = 0

! 290:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK1 = 0
      ELSE
         BRK1 = 0
         IF ( TIME .GE. 10.0 ) BRK1 = (1-0)
      ENDIF

! 300:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK2 = 0
      ELSE
         BRK2 = 0
         IF ( TIME .GE. 10.0 ) BRK2 = (1-0)
      ENDIF

! 310:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK3 = 0
      ELSE
         BRK3 = 0
         IF ( TIME .GE. 10.0 ) BRK3 = (1-0)
      ENDIF

! 320:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK4 = 0
      ELSE
         BRK4 = 0
         IF ( TIME .GE. 10.0 ) BRK4 = (1-0)
      ENDIF

! 330:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK5 = 0
      ELSE
         BRK5 = 0
         IF ( TIME .GE. 10.6 ) BRK5 = (1-0)
      ENDIF

! 340:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK6 = 0
      ELSE
         BRK6 = 0
         IF ( TIME .GE. 10.0 ) BRK6 = (1-0)
      ENDIF

! 360:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRKA = 0
      ELSE
         BRKA = 0
         IF ( TIME .GE. 1.01 ) BRKA = (1-0)
      ENDIF

! 370:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         IT_6 = 0
      ELSE
         IT_6 = 0
         IF ( TIME .GE. 1.01 ) IT_6 = (1-0)
      ENDIF

! 380:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRKA6 = 0
      ELSE
         BRKA6 = 0
         IF ( TIME .GE. 1.08 ) BRKA6 = (1-0)
      ENDIF

! 390:[consti] Integer Constant 

      IT_15 = 1

! 400:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         IT_7 = 0
      ELSE
         IT_7 = 0
         IF ( TIME .GE. 10.0 ) IT_7 = (1-0)
      ENDIF

! 410:[consti] Integer Constant 

      IT_16 = 2

! 420:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRKB = 0
      ELSE
         BRKB = 0
         IF ( TIME .GE. 10.0 ) BRKB = (1-0)
      ENDIF

! 430:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRKC = 0
      ELSE
         BRKC = 0
         IF ( TIME .GE. 10.0 ) BRKC = (1-0)
      ENDIF

! 440:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRKB6 = 0
      ELSE
         BRKB6 = 0
         IF ( TIME .GE. 10.0 ) BRKB6 = (1-0)
      ENDIF

! 450:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRKC6 = 0
      ELSE
         BRKC6 = 0
         IF ( TIME .GE. 10.0 ) BRKC6 = (1-0)
      ENDIF

! 460:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         IT_17 = 1
      ELSE
         IT_17 = 1
         IF ( TIME .GE. 0.7 ) IT_17 = (1-1)
      ENDIF

! 490:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         IT_8 = 0
      ELSE
         IT_8 = 0
         IF ( TIME .GE. 10.0 ) IT_8 = (1-0)
      ENDIF

! 510:[const] Real Constant 

      RT_4 = 1.0

! 550:[const] Real Constant 

      RT_12 = 1.0

! 560:[breaker3] 3 Phase Breaker 'BRK1'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+49),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK1)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+50),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK1)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+51),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK1)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+49),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+50),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+51),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,147708847,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,147708847,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,147708847,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+49),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+50),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+51),SS(1)))
      brk1ma = IVD1_1
      brk1mb = IVD1_2
      brk1mc = IVD1_3

! 570:[breaker3] 3 Phase Breaker 'BRK2'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+1),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK2)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+2),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK2)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+3),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK2)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+1),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+2),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+3),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,102060034,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,102060034,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,102060034,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+1),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+2),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+3),SS(1)))
      brk1oa = IVD1_1
      brk1ob = IVD1_2
      brk1oc = IVD1_3

! 580:[breaker3] 3 Phase Breaker 'BRK5'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+52),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK5)))
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+53),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK5)))
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+54),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK5)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(2)+52),SS(2)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(2)+53),SS(2)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(2)+54),SS(2)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1078623805,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1078623805,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1078623805,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(2)+52),SS(2)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(2)+53),SS(2)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(2)+54),SS(2)))
      brk1na = IVD1_1
      brk1nb = IVD1_2
      brk1nc = IVD1_3

! 590:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (brk1na .NE. 0) .AND. (brk1nb .NE. 0) .AND. (brk1nc .NE. 0) )&
     & THEN
        IT_18 = 1
      ELSE
        IT_18 = 0
      ENDIF

! 610:[mult] Multiplier 
      In_zero = RT_3 * RT_4

! 630:[mult] Multiplier 
      Vn_zero = RT_11 * RT_12

! 640:[datamerge] Merges data signals into an array 
      meaPort1(1 : 3) = Vn_1
      meaPort1(4) = RT_2
      meaPort1(5) = Vn_zero
      meaPort1(6 : 8) = In_1
      meaPort1(9) = In_zero

! 650:[select] Two Input Selector 
      IF (IT_17 .EQ. RTCI(NRTCI)) THEN
         RT_1 = REAL(IT_16)
      ELSE
         RT_1 = REAL(IT_18)
      ENDIF
      NRTCI = NRTCI + 1
!

! 660:[datamerge] Merges data signals into an array 
      meaPort2(1) = REAL(brk1na)
      meaPort2(2) = REAL(brk1nb)
      meaPort2(3) = REAL(brk1nc)

! 670:[meaDevice]  
                CALL MEA_500KV_1(TIME,IT_15,meaPort1,meaPort2,NINT(RT_1)&
     &,meaTrip)

! 680:[pgb] Output Channel 'meaTrip'

      DO IVD1_1 = 1, 3
         PGB(IPGB+16+IVD1_1-1) = REAL(meaTrip(IVD1_1))
      ENDDO

! 690:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (brk1mc .NE. 0) .AND. (brk1oc .NE. 0) ) THEN
        brk_1c = 1
      ELSE
        brk_1c = 0
      ENDIF

! 700:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (brk1mb .NE. 0) .AND. (brk1ob .NE. 0) ) THEN
        brk_1b = 1
      ELSE
        brk_1b = 0
      ENDIF

! 710:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (brk1ma .NE. 0) .AND. (brk1oa .NE. 0) ) THEN
        brk_1a = 1
      ELSE
        brk_1a = 0
      ENDIF

! 720:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(2), (IBRCH(2)+28), (IBRCH(2)+29), (IBRCH(2)+3&
     &0), (IBRCH(2)+31), (IBRCH(2)+32), (IBRCH(2)+33),0,IT_1,2,0.001)
      LVD1_1 = (OPENBR( (IBRCH(2)+28),SS(2)).AND.OPENBR( (IBRCH(2)+29),S&
     &S(2)).AND.OPENBR( (IBRCH(2)+30),SS(2)).AND.OPENBR( (IBRCH(2)+31),S&
     &S(2)).AND.OPENBR( (IBRCH(2)+32),SS(2)).AND.OPENBR( (IBRCH(2)+33),S&
     &S(2)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,905469689,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 730:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(1), (IBRCH(1)+22), (IBRCH(1)+23), (IBRCH(1)+2&
     &4), (IBRCH(1)+25), (IBRCH(1)+26), (IBRCH(1)+27),0,IT_2,0,0.001)
      LVD1_1 = (OPENBR( (IBRCH(1)+22),SS(1)).AND.OPENBR( (IBRCH(1)+23),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+24),SS(1)).AND.OPENBR( (IBRCH(1)+25),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+26),SS(1)).AND.OPENBR( (IBRCH(1)+27),S&
     &S(1)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,317278249,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 740:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(2), (IBRCH(2)+34), (IBRCH(2)+35), (IBRCH(2)+3&
     &6), (IBRCH(2)+37), (IBRCH(2)+38), (IBRCH(2)+39),0,IT_3,1,0.01)
      LVD1_1 = (OPENBR( (IBRCH(2)+34),SS(2)).AND.OPENBR( (IBRCH(2)+35),S&
     &S(2)).AND.OPENBR( (IBRCH(2)+36),SS(2)).AND.OPENBR( (IBRCH(2)+37),S&
     &S(2)).AND.OPENBR( (IBRCH(2)+38),SS(2)).AND.OPENBR( (IBRCH(2)+39),S&
     &S(2)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,164343301,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 750:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(3), (IBRCH(3)+1), (IBRCH(3)+2), (IBRCH(3)+3),&
     & (IBRCH(3)+4), (IBRCH(3)+5), (IBRCH(3)+6),0,IT_4,1,0.01)
      LVD1_1 = (OPENBR( (IBRCH(3)+1),SS(3)).AND.OPENBR( (IBRCH(3)+2),SS(&
     &3)).AND.OPENBR( (IBRCH(3)+3),SS(3)).AND.OPENBR( (IBRCH(3)+4),SS(3)&
     &).AND.OPENBR( (IBRCH(3)+5),SS(3)).AND.OPENBR( (IBRCH(3)+6),SS(3)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,1344980540,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 760:[breaker3] 3 Phase Breaker 'BRK3'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+46),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK3)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+47),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK3)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+48),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK3)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+46),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+47),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+48),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,963840866,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,963840866,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,963840866,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+46),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+47),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+48),SS(1)))

! 770:[breaker3] 3 Phase Breaker 'BRK6'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+49),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK6)))
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+50),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK6)))
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+51),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK6)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(2)+49),SS(2)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(2)+50),SS(2)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(2)+51),SS(2)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,533487104,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,533487104,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,533487104,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(2)+49),SS(2)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(2)+50),SS(2)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(2)+51),SS(2)))

! 780:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(1), (IBRCH(1)+28), (IBRCH(1)+29), (IBRCH(1)+3&
     &0), (IBRCH(1)+31), (IBRCH(1)+32), (IBRCH(1)+33),0,IT_5,1,0.001)
      LVD1_1 = (OPENBR( (IBRCH(1)+28),SS(1)).AND.OPENBR( (IBRCH(1)+29),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+30),SS(1)).AND.OPENBR( (IBRCH(1)+31),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+32),SS(1)).AND.OPENBR( (IBRCH(1)+33),S&
     &S(1)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,746649874,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 790:[breaker3] 3 Phase Breaker 'BRK4'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+43),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK4)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+44),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK4)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+45),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK4)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+43),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+44),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+45),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2138389669,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2138389669,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2138389669,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+43),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+44),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+45),SS(1)))

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 1'
! Three Phase Source: Source 1  Type: RLC
!  
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3  = -6.0*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS(1), (IBRCH(1)+10), (IBRCH(1)+11), (IBRCH(1)+&
     &12), RVD1_4, .TRUE., RVD1_1 , RVD1_2, RVD1_3)
!

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T1'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH(1)+67), (IBRCH(1)+68), (IBRCH(1)+69),SS(1),&
     &1.0,0)

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 2'
! Three Phase Source: Source 2  Type: RLC
!  
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3  = -6.0*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS(1), (IBRCH(1)+13), (IBRCH(1)+14), (IBRCH(1)+&
     &15), RVD1_4, .TRUE., RVD1_1 , RVD1_2, RVD1_3)
!

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T2'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH(1)+58), (IBRCH(1)+59), (IBRCH(1)+60),SS(1),&
     &1.0,0)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T5'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH(2)+22), (IBRCH(2)+23), (IBRCH(2)+24),SS(2),&
     &1.0,0)

! 1:[source_3] Three Phase Voltage Source Model 2 'Source4'
! Three Phase Source: Source4  Type: Ideal
!  
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3  = 7.0*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS(2), (IBRCH(2)+25), (IBRCH(2)+26), (IBRCH(2)+&
     &27), RVD1_4, .TRUE., RVD1_1 , RVD1_2, RVD1_3)
!

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T3'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH(1)+40), (IBRCH(1)+41), (IBRCH(1)+42),SS(1),&
     &1.0,0)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T4'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH(2)+46), (IBRCH(2)+47), (IBRCH(2)+48),SS(2),&
     &1.0,0)

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 3'
! Three Phase Source: Source 3  Type: RLC
!  
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3  = 8.0*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS(2), (IBRCH(2)+1), (IBRCH(2)+2), (IBRCH(2)+3)&
     &, RVD1_4, .TRUE., RVD1_1 , RVD1_2, RVD1_3)
!

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOI(ISTOI + 1) = IT_1
      STOI(ISTOI + 2) = IT_2
      STOI(ISTOI + 3) = IT_3
      STOI(ISTOI + 4) = IT_4
      STOI(ISTOI + 5) = IT_5
      STOI(ISTOI + 6) = BRK1
      STOI(ISTOI + 7) = BRK2
      STOI(ISTOI + 8) = BRK3
      STOI(ISTOI + 9) = BRK4
      STOI(ISTOI + 10) = BRK5
      STOI(ISTOI + 11) = BRK6
      STOI(ISTOI + 12) = brk_1c
      STOI(ISTOI + 13) = brk1mc
      STOI(ISTOI + 14) = brk1oc
      STOI(ISTOI + 15) = brk_1b
      STOI(ISTOI + 16) = brk1mb
      STOI(ISTOI + 17) = brk1ob
      STOI(ISTOI + 18) = brk_1a
      STOI(ISTOI + 19) = brk1ma
      STOI(ISTOI + 20) = brk1oa
      STOI(ISTOI + 21) = BRKA
      STOI(ISTOI + 22) = IT_6
      STOI(ISTOI + 23) = BRKA6
      STOI(ISTOI + 24) = BRKB
      STOI(ISTOI + 25) = BRKC
      STOI(ISTOI + 26) = BRKB6
      STOI(ISTOI + 27) = BRKC6
      STOI(ISTOI + 28) = IT_7
      STOI(ISTOI + 29) = IT_8
      STOI(ISTOI + 30) = IT_9
      STOI(ISTOI + 31) = IT_10
      STOI(ISTOI + 32) = IT_11
      STOI(ISTOI + 33) = IT_12
      STOI(ISTOI + 34) = IT_13
      STOI(ISTOI + 35) = IT_14
      STOF(ISTOF + 7) = RT_1
      STOI(ISTOI + 39) = IT_15
      STOI(ISTOI + 40) = IT_16
      STOF(ISTOF + 23) = RT_2
      STOF(ISTOF + 27) = In_zero
      STOF(ISTOF + 28) = RT_3
      STOF(ISTOF + 29) = RT_4
      STOF(ISTOF + 30) = RT_5
      STOF(ISTOF + 31) = RT_6
      STOF(ISTOF + 32) = RT_7
      STOF(ISTOF + 33) = RT_8
      STOF(ISTOF + 34) = RT_9
      STOF(ISTOF + 35) = RT_10
      STOF(ISTOF + 36) = RT_11
      STOF(ISTOF + 37) = RT_12
      STOF(ISTOF + 38) = Vn_zero
      STOI(ISTOI + 41) = IT_17
      STOI(ISTOI + 42) = IT_18
      STOI(ISTOI + 43) = brk1nc
      STOI(ISTOI + 44) = brk1nb
      STOI(ISTOI + 45) = brk1na

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 0 + IT_0) = Im_1(IT_0)
         STOF(ISTOF + 3 + IT_0) = I2(IT_0)
         STOI(ISTOI + 35 + IT_0) = meaTrip(IT_0)
         STOF(ISTOF + 7 + IT_0) = meaPort2(IT_0)
         STOF(ISTOF + 19 + IT_0) = Vn_1(IT_0)
         STOF(ISTOF + 23 + IT_0) = In_1(IT_0)
         STOF(ISTOF + 38 + IT_0) = Vn_2(IT_0)
         STOF(ISTOF + 41 + IT_0) = Vm_1(IT_0)
         STOF(ISTOF + 44 + IT_0) = Im_2(IT_0)
         STOF(ISTOF + 47 + IT_0) = Vm_2(IT_0)
         STOF(ISTOF + 50 + IT_0) = I1(IT_0)
         STOF(ISTOF + 53 + IT_0) = V1(IT_0)
         STOF(ISTOF + 56 + IT_0) = V2(IT_0)
         STOF(ISTOF + 59 + IT_0) = In_2(IT_0)
      END DO

! Array (1:9) quantities...
      DO IT_0 = 1,9
         STOF(ISTOF + 10 + IT_0) = meaPort1(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'
!     SUBR    MPHASE3PS     ! Phase Measurement in a 3p signal
      REAL    VBRANCH       ! 

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indices
      INTEGER  Bus3(3), BusL(3), NT_1(3), NT_2(3)
      INTEGER  NT_3(3), NT_5(3), NT_6(3), NT_7(3)
      INTEGER  NT_11(3), NT_18(3), NT_20(3)

! Control Signals
      INTEGER  IT_15, IT_16
      REAL     Im_1(3), I2(3), Vn_1(3), RT_2
      REAL     In_1(3), RT_3, RT_4, RT_5, RT_6
      REAL     RT_7, RT_8, RT_9, RT_10, RT_11
      REAL     RT_12, Vn_2(3), Vm_1(3), Im_2(3)
      REAL     Vm_2(3), I1(3), V1(3), V2(3)
      REAL     In_2(3)

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(4), IBRCH(4), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 18
      INODE     = NNODE + 2
      NNODE     = NNODE + 80
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 15
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 4

      DO IT_0 = 1,4
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 96

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 75

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 6

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 12
!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      IT_15    = STOI(ISTOI + 39)
      IT_16    = STOI(ISTOI + 40)
      RT_2     = STOF(ISTOF + 23)
      RT_3     = STOF(ISTOF + 28)
      RT_4     = STOF(ISTOF + 29)
      RT_5     = STOF(ISTOF + 30)
      RT_6     = STOF(ISTOF + 31)
      RT_7     = STOF(ISTOF + 32)
      RT_8     = STOF(ISTOF + 33)
      RT_9     = STOF(ISTOF + 34)
      RT_10    = STOF(ISTOF + 35)
      RT_11    = STOF(ISTOF + 36)
      RT_12    = STOF(ISTOF + 37)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Im_1(IT_0) = STOF(ISTOF + 0 + IT_0)
         I2(IT_0) = STOF(ISTOF + 3 + IT_0)
         Vn_1(IT_0) = STOF(ISTOF + 19 + IT_0)
         In_1(IT_0) = STOF(ISTOF + 23 + IT_0)
         Vn_2(IT_0) = STOF(ISTOF + 38 + IT_0)
         Vm_1(IT_0) = STOF(ISTOF + 41 + IT_0)
         Im_2(IT_0) = STOF(ISTOF + 44 + IT_0)
         Vm_2(IT_0) = STOF(ISTOF + 47 + IT_0)
         I1(IT_0) = STOF(ISTOF + 50 + IT_0)
         V1(IT_0) = STOF(ISTOF + 53 + IT_0)
         V2(IT_0) = STOF(ISTOF + 56 + IT_0)
         In_2(IT_0) = STOF(ISTOF + 59 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         Bus3(IT_0) = NODE(INODE + 3 + IT_0)
         BusL(IT_0) = NODE(INODE + 12 + IT_0)
         NT_1(IT_0) = NODE(INODE + 18 + IT_0)
         NT_2(IT_0) = NODE(INODE + 21 + IT_0)
         NT_3(IT_0) = NODE(INODE + 24 + IT_0)
         NT_5(IT_0) = NODE(INODE + 30 + IT_0)
         NT_6(IT_0) = NODE(INODE + 33 + IT_0)
         NT_7(IT_0) = NODE(INODE + 36 + IT_0)
         NT_11(IT_0) = NODE(INODE + 48 + IT_0)
         NT_18(IT_0) = NODE(INODE + 69 + IT_0)
         NT_20(IT_0) = NODE(INODE + 75 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 30:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 40:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 70:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 90:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 110:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 120:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 130:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      Im_1(1) = ( CBR((IBRCH(1)+70), SS(1)))
      Im_1(2) = ( CBR((IBRCH(1)+71), SS(1)))
      Im_1(3) = ( CBR((IBRCH(1)+72), SS(1)))
      Vm_1(1) = EMTDC_VVDC(SS(1), NT_1(1), 0)
      Vm_1(2) = EMTDC_VVDC(SS(1), NT_1(2), 0)
      Vm_1(3) = EMTDC_VVDC(SS(1), NT_1(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+70), (IBRCH(1)+71),&
     & (IBRCH(1)+72),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,487321937,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+70), (IBRCH(1)+71),&
     & (IBRCH(1)+72),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,487321937,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_1(1), NT_1(2), NT_1(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,487321937,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(1), NT_1(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_1(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_1(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,487321937,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,487321937,1,"hide2")
      ENDIF

! 140:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      In_2(1) = ( CBR((IBRCH(2)+73), SS(2)))
      In_2(2) = ( CBR((IBRCH(2)+74), SS(2)))
      In_2(3) = ( CBR((IBRCH(2)+75), SS(2)))
      Vn_2(1) = EMTDC_VVDC(SS(2), NT_18(1), 0)
      Vn_2(2) = EMTDC_VVDC(SS(2), NT_18(2), 0)
      Vn_2(3) = EMTDC_VVDC(SS(2), NT_18(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+73), (IBRCH(2)+74),&
     & (IBRCH(2)+75),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,2015510345,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+73), (IBRCH(2)+74),&
     & (IBRCH(2)+75),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,2015510345,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(2), NT_18(1), NT_18(2), NT_18(&
     &3), RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,2015510345,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(2), NT_18(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(2), NT_18(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(2), NT_18(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,2015510345,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,2015510345,1,"hide2")
      ENDIF

! 150:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I1(1) = ( CBR((IBRCH(1)+76), SS(1)))
      I1(2) = ( CBR((IBRCH(1)+77), SS(1)))
      I1(3) = ( CBR((IBRCH(1)+78), SS(1)))
      V1(1) = EMTDC_VVDC(SS(1), NT_2(1), 0)
      V1(2) = EMTDC_VVDC(SS(1), NT_2(2), 0)
      V1(3) = EMTDC_VVDC(SS(1), NT_2(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+76), (IBRCH(1)+77),&
     & (IBRCH(1)+78),RTCF(IVD1_1+2),0)
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+76), (IBRCH(1)+77),&
     & (IBRCH(1)+78),RTCF(IVD1_1+2),0)
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_2(1), NT_2(2), NT_2(3),&
     & RTCF(IVD1_1+2))
      RVD1_2 = EMTDC_VVDC(SS(1), NT_2(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_2(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_2(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)

! 160:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      In_1(1) = ( CBR((IBRCH(2)+10), SS(2)))
      In_1(2) = ( CBR((IBRCH(2)+11), SS(2)))
      In_1(3) = ( CBR((IBRCH(2)+12), SS(2)))
      Vn_1(1) = EMTDC_VVDC(SS(2), BusL(1), 0)
      Vn_1(2) = EMTDC_VVDC(SS(2), BusL(2), 0)
      Vn_1(3) = EMTDC_VVDC(SS(2), BusL(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+10), (IBRCH(2)+11),&
     & (IBRCH(2)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,373190358,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+10), (IBRCH(2)+11),&
     & (IBRCH(2)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,373190358,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(2), BusL(1), BusL(2), BusL(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,373190358,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(2), BusL(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(2), BusL(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(2), BusL(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,373190358,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,373190358,1,"hide2")
      ENDIF

! 170:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      Im_2(1) = ( CBR((IBRCH(1)+73), SS(1)))
      Im_2(2) = ( CBR((IBRCH(1)+74), SS(1)))
      Im_2(3) = ( CBR((IBRCH(1)+75), SS(1)))
      Vm_2(1) = EMTDC_VVDC(SS(1), NT_20(1), 0)
      Vm_2(2) = EMTDC_VVDC(SS(1), NT_20(2), 0)
      Vm_2(3) = EMTDC_VVDC(SS(1), NT_20(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+73), (IBRCH(1)+74),&
     & (IBRCH(1)+75),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,398562169,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+73), (IBRCH(1)+74),&
     & (IBRCH(1)+75),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,398562169,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_20(1), NT_20(2), NT_20(&
     &3), RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,398562169,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(1), NT_20(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_20(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_20(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,398562169,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,398562169,1,"hide2")
      ENDIF

! 180:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I2(1) = ( CBR((IBRCH(1)+79), SS(1)))
      I2(2) = ( CBR((IBRCH(1)+80), SS(1)))
      I2(3) = ( CBR((IBRCH(1)+81), SS(1)))
      V2(1) = EMTDC_VVDC(SS(1), NT_20(1), 0)
      V2(2) = EMTDC_VVDC(SS(1), NT_20(2), 0)
      V2(3) = EMTDC_VVDC(SS(1), NT_20(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+79), (IBRCH(1)+80),&
     & (IBRCH(1)+81),RTCF(IVD1_1+2),0)
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+79), (IBRCH(1)+80),&
     & (IBRCH(1)+81),RTCF(IVD1_1+2),0)
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_20(1), NT_20(2), NT_20(&
     &3), RTCF(IVD1_1+2))
      RVD1_2 = EMTDC_VVDC(SS(1), NT_20(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_20(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_20(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)

! 240:[pgb] Output Channel 'Vm_1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+1+IVD1_1-1) = Vm_1(IVD1_1)
      ENDDO

! 250:[pgb] Output Channel 'I2'

      DO IVD1_1 = 1, 3
         PGB(IPGB+4+IVD1_1-1) = I2(IVD1_1)
      ENDDO

! 260:[pgb] Output Channel 'Im_1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+7+IVD1_1-1) = Im_1(IVD1_1)
      ENDDO

! 270:[pgb] Output Channel 'Vn_2'

      DO IVD1_1 = 1, 3
         PGB(IPGB+10+IVD1_1-1) = Vn_2(IVD1_1)
      ENDDO

! 280:[pgb] Output Channel 'In_1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+13+IVD1_1-1) = In_1(IVD1_1)
      ENDDO

! 350:[datatap] Scalar/Array Tap 
      RT_2 = Vn_2(1)

! 390:[consti] Integer Constant 

      IT_15 = 1

! 410:[consti] Integer Constant 

      IT_16 = 2

! 470:[datatap] Scalar/Array Tap 
      RT_5 = In_1(1)

! 480:[datatap] Scalar/Array Tap 
      RT_6 = In_1(2)

! 500:[datatap] Scalar/Array Tap 
      RT_7 = In_1(3)

! 510:[const] Real Constant 

      RT_4 = 1.0

! 520:[datatap] Scalar/Array Tap 
      RT_8 = Vn_1(1)

! 530:[datatap] Scalar/Array Tap 
      RT_9 = Vn_1(2)

! 540:[datatap] Scalar/Array Tap 
      RT_10 = Vn_1(3)

! 550:[const] Real Constant 

      RT_12 = 1.0

! 560:[breaker3] 3 Phase Breaker 'BRK1'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+49), (IBRCH(1)+50), (IBRCH(1)+51),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 570:[breaker3] 3 Phase Breaker 'BRK2'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (IBRCH(1)+3),0,0&
     &,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 580:[breaker3] 3 Phase Breaker 'BRK5'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(2), (IBRCH(2)+52), (IBRCH(2)+53), (IBRCH(2)+54),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 600:[sumjct] Summing/Differencing Junctions 
      RT_3 = + RT_5 + RT_6 + RT_7

! 620:[sumjct] Summing/Differencing Junctions 
      RT_11 = + RT_8 + RT_9 + RT_10

! 720:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 730:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 740:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 750:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 760:[breaker3] 3 Phase Breaker 'BRK3'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+46), (IBRCH(1)+47), (IBRCH(1)+48),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 770:[breaker3] 3 Phase Breaker 'BRK6'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(2), (IBRCH(2)+49), (IBRCH(2)+50), (IBRCH(2)+51),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 780:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 790:[breaker3] 3 Phase Breaker 'BRK4'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+43), (IBRCH(1)+44), (IBRCH(1)+45),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+16), (IBRCH(1)+17),&
     & (IBRCH(1)+18),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,441569603,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+16), (IBRCH(1)+17),&
     & (IBRCH(1)+18),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,441569603,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_6(1), NT_6(2), NT_6(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,441569603,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(1), NT_6(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_6(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_6(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,441569603,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,441569603,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+19), (IBRCH(1)+20),&
     & (IBRCH(1)+21),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,762229329,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+19), (IBRCH(1)+20),&
     & (IBRCH(1)+21),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,762229329,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_7(1), NT_7(2), NT_7(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,762229329,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(1), NT_7(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_7(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_7(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,762229329,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,762229329,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+13), (IBRCH(2)+14),&
     & (IBRCH(2)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,996364783,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+13), (IBRCH(2)+14),&
     & (IBRCH(2)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,996364783,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(2), NT_11(1), NT_11(2), NT_11(&
     &3), RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,996364783,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(2), NT_11(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(2), NT_11(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(2), NT_11(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,996364783,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,996364783,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (&
     &IBRCH(1)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,1594929909,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (&
     &IBRCH(1)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,1594929909,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_5(1), NT_5(2), NT_5(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,1594929909,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(1), NT_5(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_5(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_5(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1594929909,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1594929909,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+4), (IBRCH(2)+5), (&
     &IBRCH(2)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,2080055450,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+4), (IBRCH(2)+5), (&
     &IBRCH(2)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,2080055450,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(2), NT_3(1), NT_3(2), NT_3(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,2080055450,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(2), NT_3(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(2), NT_3(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(2), NT_3(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,2080055450,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,2080055450,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+7), (IBRCH(2)+8), (&
     &IBRCH(2)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,829704968,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+7), (IBRCH(2)+8), (&
     &IBRCH(2)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,829704968,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(2), Bus3(1), Bus3(2), Bus3(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG2(ICALL_NO,829704968,RVD1_1,"Vd")
      RVD1_2 = EMTDC_VVDC(SS(2), Bus3(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(2), Bus3(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(2), Bus3(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,829704968,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,829704968,1,"hide2")
      ENDIF

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOI(ISTOI + 39) = IT_15
      STOI(ISTOI + 40) = IT_16
      STOF(ISTOF + 23) = RT_2
      STOF(ISTOF + 28) = RT_3
      STOF(ISTOF + 29) = RT_4
      STOF(ISTOF + 30) = RT_5
      STOF(ISTOF + 31) = RT_6
      STOF(ISTOF + 32) = RT_7
      STOF(ISTOF + 33) = RT_8
      STOF(ISTOF + 34) = RT_9
      STOF(ISTOF + 35) = RT_10
      STOF(ISTOF + 36) = RT_11
      STOF(ISTOF + 37) = RT_12

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 0 + IT_0) = Im_1(IT_0)
         STOF(ISTOF + 3 + IT_0) = I2(IT_0)
         STOF(ISTOF + 19 + IT_0) = Vn_1(IT_0)
         STOF(ISTOF + 23 + IT_0) = In_1(IT_0)
         STOF(ISTOF + 38 + IT_0) = Vn_2(IT_0)
         STOF(ISTOF + 41 + IT_0) = Vm_1(IT_0)
         STOF(ISTOF + 44 + IT_0) = Im_2(IT_0)
         STOF(ISTOF + 47 + IT_0) = Vm_2(IT_0)
         STOF(ISTOF + 50 + IT_0) = I1(IT_0)
         STOF(ISTOF + 53 + IT_0) = V1(IT_0)
         STOF(ISTOF + 56 + IT_0) = V2(IT_0)
         STOF(ISTOF + 59 + IT_0) = In_2(IT_0)
      END DO


!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      INTEGER  IT_15, IT_16
      REAL     RT_4, RT_12

! Internal Variables
      INTEGER  IVD1_1, IVD1_2
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(4), IBRCH(4), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 80
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 15
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 4

      DO IT_0 = 1,4
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 96

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 75

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 6

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 12
!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 30:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 40:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 70:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 90:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 110:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 120:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 390:[consti] Integer Constant 
      IT_15 = 1

! 410:[consti] Integer Constant 
      IT_16 = 2

! 510:[const] Real Constant 
      RT_4 = 1.0

! 550:[const] Real Constant 
      RT_12 = 1.0

! 560:[breaker3] 3 Phase Breaker 'BRK1'
      CALL COMPONENT_ID(ICALL_NO,147708847)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 570:[breaker3] 3 Phase Breaker 'BRK2'
      CALL COMPONENT_ID(ICALL_NO,102060034)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 580:[breaker3] 3 Phase Breaker 'BRK5'
      CALL COMPONENT_ID(ICALL_NO,1078623805)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 610:[mult] Multiplier 

! 630:[mult] Multiplier 

! 640:[datamerge] Merges data signals into an array 

! 650:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 660:[datamerge] Merges data signals into an array 

! 670:[meaDevice]  

! 680:[pgb] Output Channel 'meaTrip'

! 720:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 730:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 740:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 750:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 760:[breaker3] 3 Phase Breaker 'BRK3'
      CALL COMPONENT_ID(ICALL_NO,963840866)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 770:[breaker3] 3 Phase Breaker 'BRK6'
      CALL COMPONENT_ID(ICALL_NO,533487104)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 780:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 790:[breaker3] 3 Phase Breaker 'BRK4'
      CALL COMPONENT_ID(ICALL_NO,2138389669)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 1'
      IVD1_1 = 1
      IVD1_2 = 1
      IF (0.16 .LE. 1.0E-38) IVD1_1 = 0
      IF (0.0 .LE. 1.0E-38) IVD1_2 = 0
      CALL E_BRANCH_CFG( (IBRCH(1)+10),SS(1),1,IVD1_1,IVD1_2,30.0,0.16,0&
     &.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+11),SS(1),1,IVD1_1,IVD1_2,30.0,0.16,0&
     &.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+12),SS(1),1,IVD1_1,IVD1_2,30.0,0.16,0&
     &.0)
      RTCF(NRTCF)   = 220.0*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+1) = 50.0*TWO_PI
      RTCF(NRTCF+3) = 0.06
      NRTCF = NRTCF + 4

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T1'
      CALL COMPONENT_ID(ICALL_NO,141172093)
      RVD1_1 = ONE_3RD*1500.0
      RVD1_2 = 220.0
      RVD1_3 = 500.0*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 1),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      CALL E_TF2W_CFG((IXFMR + 2),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      CALL E_TF2W_CFG((IXFMR + 3),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      IF (0.002 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.002
        RVD1_4 = 6.0/(1500.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+61),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+62),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+63),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+64),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+65),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+66),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH(1)+67), (IBRCH(1)+68), (IBRCH(1)+69),SS(1),&
     &RVD1_1,RVD1_2,0.2,1.25,50.0,1.0,0.5,0.1)

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 2'
      IVD1_1 = 1
      IVD1_2 = 1
      IF (0.15 .LE. 1.0E-38) IVD1_1 = 0
      IF (0.0 .LE. 1.0E-38) IVD1_2 = 0
      CALL E_BRANCH_CFG( (IBRCH(1)+13),SS(1),1,IVD1_1,IVD1_2,30.0,0.15,0&
     &.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+14),SS(1),1,IVD1_1,IVD1_2,30.0,0.15,0&
     &.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+15),SS(1),1,IVD1_1,IVD1_2,30.0,0.15,0&
     &.0)
      RTCF(NRTCF)   = 220.0*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+1) = 50.0*TWO_PI
      RTCF(NRTCF+3) = 0.06
      NRTCF = NRTCF + 4

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T2'
      CALL COMPONENT_ID(ICALL_NO,612935706)
      RVD1_1 = ONE_3RD*500.0
      RVD1_2 = 220.0
      RVD1_3 = 500.0*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 4),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      CALL E_TF2W_CFG((IXFMR + 5),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      CALL E_TF2W_CFG((IXFMR + 6),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      IF (0.002 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.002
        RVD1_4 = 6.0/(500.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+52),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+53),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+54),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+55),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+56),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+57),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH(1)+58), (IBRCH(1)+59), (IBRCH(1)+60),SS(1),&
     &RVD1_1,RVD1_2,0.2,1.25,50.0,1.0,0.5,0.1)

! 1:[capacitive_load] Three phase capacitive load 
      CALL COMPONENT_ID(ICALL_NO,693233503)
      CALL CAPLOAD_CFG(SS(2), (IBRCH(2)+55), (IBRCH(2)+56), (IBRCH(2)+57&
     &),0,100.0,500.0,50.0)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T5'
      CALL COMPONENT_ID(ICALL_NO,382463773)
      RVD1_1 = ONE_3RD*800.0
      RVD1_2 = 500.0*SQRT_1BY3
      RVD1_3 = 220.0
      CALL E_TF2W_CFG((IXFMR + 7),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      CALL E_TF2W_CFG((IXFMR + 8),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      CALL E_TF2W_CFG((IXFMR + 9),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3,&
     &0.5)
      IF (0.002 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.002
        RVD1_4 = 6.0/(800.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(2)+16),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+17),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+18),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+19),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+20),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+21),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH(2)+22), (IBRCH(2)+23), (IBRCH(2)+24),SS(2),&
     &RVD1_1,RVD1_2,0.2,1.25,50.0,1.0,0.5,0.1)

! 1:[source_3] Three Phase Voltage Source Model 2 'Source4'
      RTCF(NRTCF)   = 220.0*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+1) = 50.0*TWO_PI
      RTCF(NRTCF+3) = 0.06
      NRTCF = NRTCF + 4

! 1:[resistive_load] Three phase resistive load 
      CALL RESLOAD_CFG(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (IBRCH(1)+6),0&
     &,2500.0,220.0)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T3'
      CALL COMPONENT_ID(ICALL_NO,498402631)
      RVD1_1 = ONE_3RD*3000.0
      RVD1_2 = 220.0
      RVD1_3 = 500.0*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 10),0,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,2&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 11),0,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,2&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 12),0,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,2&
     &.0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(3000.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+34),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+35),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+36),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+37),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+38),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+39),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH(1)+40), (IBRCH(1)+41), (IBRCH(1)+42),SS(1),&
     &RVD1_1,RVD1_2,0.2,1.17,50.0,0.0,2.0,0.0)

! 1:[capacitive_load] Three phase capacitive load 
      CALL COMPONENT_ID(ICALL_NO,335951040)
      CALL CAPLOAD_CFG(SS(2), (IBRCH(2)+58), (IBRCH(2)+59), (IBRCH(2)+60&
     &),0,100.0,500.0,50.0)

! 1:[capacitive_load] Three phase capacitive load 
      CALL COMPONENT_ID(ICALL_NO,1497841002)
      CALL CAPLOAD_CFG(SS(1), (IBRCH(1)+82), (IBRCH(1)+83), (IBRCH(1)+84&
     &),0,500.0,220.0,50.0)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T4'
      CALL COMPONENT_ID(ICALL_NO,821367582)
      RVD1_1 = ONE_3RD*800.0
      RVD1_2 = 500.0*SQRT_1BY3
      RVD1_3 = 220.0
      CALL E_TF2W_CFG((IXFMR + 13),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3&
     &,0.5)
      CALL E_TF2W_CFG((IXFMR + 14),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3&
     &,0.5)
      CALL E_TF2W_CFG((IXFMR + 15),0,RVD1_1,50.0,0.1,0.005,RVD1_2,RVD1_3&
     &,0.5)
      IF (0.002 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.002
        RVD1_4 = 6.0/(800.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(2)+40),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+41),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+42),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+43),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+44),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+45),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH(2)+46), (IBRCH(2)+47), (IBRCH(2)+48),SS(2),&
     &RVD1_1,RVD1_2,0.2,1.25,50.0,1.0,0.5,0.1)

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 3'
      IVD1_1 = 1
      IVD1_2 = 1
      IF (0.002 .LE. 1.0E-38) IVD1_1 = 0
      IF (0.0 .LE. 1.0E-38) IVD1_2 = 0
      CALL E_BRANCH_CFG( (IBRCH(2)+1),SS(2),1,IVD1_1,IVD1_2,1.0,0.002,0.&
     &0)
      CALL E_BRANCH_CFG( (IBRCH(2)+2),SS(2),1,IVD1_1,IVD1_2,1.0,0.002,0.&
     &0)
      CALL E_BRANCH_CFG( (IBRCH(2)+3),SS(2),1,IVD1_1,IVD1_2,1.0,0.002,0.&
     &0)
      RTCF(NRTCF)   = 220.0*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+1) = 50.0*TWO_PI
      RTCF(NRTCF+3) = 0.06
      NRTCF = NRTCF + 4

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  Bus3(3), BusL(3), NT_1(3), NT_2(3)
      INTEGER  NT_3(3), NT_5(3), NT_6(3), NT_7(3)
      INTEGER  NT_11(3), NT_18(3), NT_20(3)

! Control Signals
      INTEGER  IT_15, IT_16
      REAL     RT_4, RT_12

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(4), IBRCH(4), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 80
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 15
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 4

      DO IT_0 = 1,4
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 96

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 75

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 6

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 12
!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         Bus3(IT_0) = NODE(INODE + 3 + IT_0)
         BusL(IT_0) = NODE(INODE + 12 + IT_0)
         NT_1(IT_0) = NODE(INODE + 18 + IT_0)
         NT_2(IT_0) = NODE(INODE + 21 + IT_0)
         NT_3(IT_0) = NODE(INODE + 24 + IT_0)
         NT_5(IT_0) = NODE(INODE + 30 + IT_0)
         NT_6(IT_0) = NODE(INODE + 33 + IT_0)
         NT_7(IT_0) = NODE(INODE + 36 + IT_0)
         NT_11(IT_0) = NODE(INODE + 48 + IT_0)
         NT_18(IT_0) = NODE(INODE + 69 + IT_0)
         NT_20(IT_0) = NODE(INODE + 75 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 130:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 140:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 150:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 160:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 170:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 180:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 240:[pgb] Output Channel 'Vm_1'

! 250:[pgb] Output Channel 'I2'

! 260:[pgb] Output Channel 'Im_1'

! 270:[pgb] Output Channel 'Vn_2'

! 280:[pgb] Output Channel 'In_1'

! 350:[datatap] Scalar/Array Tap 

! 390:[consti] Integer Constant 
      IT_15 = 1

! 410:[consti] Integer Constant 
      IT_16 = 2

! 470:[datatap] Scalar/Array Tap 

! 480:[datatap] Scalar/Array Tap 

! 500:[datatap] Scalar/Array Tap 

! 510:[const] Real Constant 
      RT_4 = 1.0

! 520:[datatap] Scalar/Array Tap 

! 530:[datatap] Scalar/Array Tap 

! 540:[datatap] Scalar/Array Tap 

! 550:[const] Real Constant 
      RT_12 = 1.0

! 600:[sumjct] Summing/Differencing Junctions 

! 620:[sumjct] Summing/Differencing Junctions 

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

      RETURN
      END

